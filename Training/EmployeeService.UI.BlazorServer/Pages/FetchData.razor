@page "/departments"

@using EmployeeService.UI.Business.Services
@using EmployeeService.UI.Business.Model.Dto
@inject IDepartmentService deptService

<h1>Departments</h1>

@if(Departments == null)
{
    <p><em>Please wait...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <td scope="col">Department Name</td>
                <td scope="col">Location</td>
                <td scope="col">Edit</td>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Departments.Count; i++)
            {
                DepartmentDto department = @Departments[i];

                <tr>
                    <td scope="row">@department.Id</td>
                    <td><input type="text" @bind-value="@department.Name" disabled="@department.IsDisabled" /></td>
                    <td><input type="text" @bind-value="@department.Location" disabled="@department.IsDisabled" /></td>
                    <td><EditDepartment CanEdit="@((args)=> HandleCanEdit(args.Item1,args.Item2))" CanSave="HandleCanSave" @bind-Department="@department"></EditDepartment></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    //private bool IsDisabled { get; set; } = true;

    private List<DepartmentDto> Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Departments = await deptService.GetAll();
    }

    private void HandleCanEdit(bool canEdit, int id)
    {
        Departments.First(x => x.Id == id).IsDisabled = canEdit;
    }

    private async Task HandleCanSave(DepartmentDto arg)
    {
        await deptService.Update(arg);
    }


}
